// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package nydigits

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson12e43ef9DecodeGithubComTimgluzNydigitsPkg(in *jlexer.Lexer, out *Solution) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = int(in.Int())
		case "operations":
			if in.IsNull() {
				in.Skip()
				out.Operations = nil
			} else {
				in.Delim('[')
				if out.Operations == nil {
					if !in.IsDelim(']') {
						out.Operations = make([]OperationStep, 0, 2)
					} else {
						out.Operations = []OperationStep{}
					}
				} else {
					out.Operations = (out.Operations)[:0]
				}
				for !in.IsDelim(']') {
					var v1 OperationStep
					(v1).UnmarshalEasyJSON(in)
					out.Operations = append(out.Operations, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12e43ef9EncodeGithubComTimgluzNydigitsPkg(out *jwriter.Writer, in Solution) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Value))
	}
	{
		const prefix string = ",\"operations\":"
		out.RawString(prefix)
		if in.Operations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Operations {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Solution) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12e43ef9EncodeGithubComTimgluzNydigitsPkg(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Solution) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12e43ef9EncodeGithubComTimgluzNydigitsPkg(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Solution) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12e43ef9DecodeGithubComTimgluzNydigitsPkg(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Solution) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12e43ef9DecodeGithubComTimgluzNydigitsPkg(l, v)
}
func easyjson12e43ef9DecodeGithubComTimgluzNydigitsPkg1(in *jlexer.Lexer, out *Problem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "target":
			out.Target = int(in.Int())
		case "digits":
			if in.IsNull() {
				in.Skip()
				out.Digits = nil
			} else {
				in.Delim('[')
				if out.Digits == nil {
					if !in.IsDelim(']') {
						out.Digits = make([]int, 0, 8)
					} else {
						out.Digits = []int{}
					}
				} else {
					out.Digits = (out.Digits)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int
					v4 = int(in.Int())
					out.Digits = append(out.Digits, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12e43ef9EncodeGithubComTimgluzNydigitsPkg1(out *jwriter.Writer, in Problem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"target\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Target))
	}
	{
		const prefix string = ",\"digits\":"
		out.RawString(prefix)
		if in.Digits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Digits {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Problem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12e43ef9EncodeGithubComTimgluzNydigitsPkg1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Problem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12e43ef9EncodeGithubComTimgluzNydigitsPkg1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Problem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12e43ef9DecodeGithubComTimgluzNydigitsPkg1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Problem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12e43ef9DecodeGithubComTimgluzNydigitsPkg1(l, v)
}
func easyjson12e43ef9DecodeGithubComTimgluzNydigitsPkg2(in *jlexer.Lexer, out *OperationStep) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.Op = Operator(in.Int())
		case "digit":
			out.Digit = int(in.Int())
		case "prev_value":
			out.PrevValue = int(in.Int())
		case "value":
			out.Value = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12e43ef9EncodeGithubComTimgluzNydigitsPkg2(out *jwriter.Writer, in OperationStep) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"op\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Op))
	}
	{
		const prefix string = ",\"digit\":"
		out.RawString(prefix)
		out.Int(int(in.Digit))
	}
	{
		const prefix string = ",\"prev_value\":"
		out.RawString(prefix)
		out.Int(int(in.PrevValue))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Int(int(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OperationStep) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12e43ef9EncodeGithubComTimgluzNydigitsPkg2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OperationStep) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12e43ef9EncodeGithubComTimgluzNydigitsPkg2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OperationStep) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12e43ef9DecodeGithubComTimgluzNydigitsPkg2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OperationStep) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12e43ef9DecodeGithubComTimgluzNydigitsPkg2(l, v)
}
func easyjson12e43ef9DecodeGithubComTimgluzNydigitsPkg3(in *jlexer.Lexer, out *Node) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Parent":
			if in.IsNull() {
				in.Skip()
				out.Parent = nil
			} else {
				if out.Parent == nil {
					out.Parent = new(Node)
				}
				(*out.Parent).UnmarshalEasyJSON(in)
			}
		case "Op":
			out.Op = Operator(in.Int())
		case "Value":
			out.Value = int(in.Int())
		case "Digit":
			out.Digit = int(in.Int())
		case "UnusedDigits":
			if in.IsNull() {
				in.Skip()
				out.UnusedDigits = nil
			} else {
				in.Delim('[')
				if out.UnusedDigits == nil {
					if !in.IsDelim(']') {
						out.UnusedDigits = make([]int, 0, 8)
					} else {
						out.UnusedDigits = []int{}
					}
				} else {
					out.UnusedDigits = (out.UnusedDigits)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int
					v7 = int(in.Int())
					out.UnusedDigits = append(out.UnusedDigits, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Children":
			if in.IsNull() {
				in.Skip()
				out.Children = nil
			} else {
				in.Delim('[')
				if out.Children == nil {
					if !in.IsDelim(']') {
						out.Children = make([]*Node, 0, 8)
					} else {
						out.Children = []*Node{}
					}
				} else {
					out.Children = (out.Children)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *Node
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(Node)
						}
						(*v8).UnmarshalEasyJSON(in)
					}
					out.Children = append(out.Children, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12e43ef9EncodeGithubComTimgluzNydigitsPkg3(out *jwriter.Writer, in Node) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Parent\":"
		out.RawString(prefix[1:])
		if in.Parent == nil {
			out.RawString("null")
		} else {
			(*in.Parent).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Op\":"
		out.RawString(prefix)
		out.Int(int(in.Op))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.Int(int(in.Value))
	}
	{
		const prefix string = ",\"Digit\":"
		out.RawString(prefix)
		out.Int(int(in.Digit))
	}
	{
		const prefix string = ",\"UnusedDigits\":"
		out.RawString(prefix)
		if in.UnusedDigits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.UnusedDigits {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Children\":"
		out.RawString(prefix)
		if in.Children == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Children {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Node) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12e43ef9EncodeGithubComTimgluzNydigitsPkg3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Node) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12e43ef9EncodeGithubComTimgluzNydigitsPkg3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Node) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12e43ef9DecodeGithubComTimgluzNydigitsPkg3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Node) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12e43ef9DecodeGithubComTimgluzNydigitsPkg3(l, v)
}
